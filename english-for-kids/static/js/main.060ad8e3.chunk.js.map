{"version":3,"sources":["components/game-mode/game-mode-context.tsx","components/open-nav/open-nav.tsx","utils/arrLinks.tsx","components/navbar/Navbar.tsx","components/burger-menu/Burger-menu.tsx","api/types.tsx","components/switcher/Switcher.tsx","components/header/header.tsx","api/dummyMocks.tsx","utils/game-over-audio.tsx","utils/shuffleArray.tsx","components/cards/cards.tsx","utils/updateWordStats.tsx","components/game-over/game-over.tsx","components/game-container/game-container.tsx","utils/progressStars.tsx","pages/game-page/game-page.tsx","components/categories/categories.tsx","components/main-page-container/main-page-container.tsx","pages/main-page/main-page.tsx","utils/dataForStatistics.tsx","components/data-for-statistics/word-for-statistics.tsx","components/data-for-statistics/category-for-statistics.tsx","pages/statistics-page/statistics-page.tsx","components/main/main.tsx","components/footer/footer.tsx","App.tsx","index.tsx"],"names":["DEFFAULT_GAME_MODE","gameMode","setMode","gameModeContext","createContext","DEFFAULT_OPEN_NAV","isOpen","OpenNavContext","ArrLinks","link","linkName","Navbar","open","openNav","classNames","links","map","i","className","to","exact","onClick","evt","stopPropagation","role","Burger","useContext","useState","toggleIsOpen","setToggleIsOpen","toggle","useEffect","PLAY","TRAIN","Switcher","setGameMode","checked","htmlFor","type","name","id","defaultChecked","Header","DummyServer","result","setResult","loading","setLoading","a","fetch","response","json","res","Error","length","GetData","GameOverAudio","setTimeout","Audio","play","shuffleArray","array","gameArr","j","Math","floor","random","Cards","word","translation","image","audioSrc","activeSound","NextAudio","gameArrIndex","Progress","category","isGame","currentState","JSON","parse","localStorage","getItem","isClick","setIsClick","isCorrect","setIsCorrect","Number","clicksTrainMode","setClicksTrainMode","succesGameMode","setSuccesGameMode","wrongGameMode","setWrongGameMode","context","cardClasses","cardContainerClasses","percentCorrects","toFixed","setItem","stringify","updateWordStats","onClickHandler","elem","x","audio","volume","addEventListener","url","currentTime","paramOnClickHandler","onMouseLeave","src","alt","GameOver","endGame","redirect","setRedirect","GameContainer","gameModeCTX","setIsGame","setGameArr","setGameArrIndex","setActiveSound","gameProgress","setGameProgress","setEndGame","errors","setErrors","currArrCards","cards","shuffleArr","btnClasses","idx","status","arr","card","PlayAudio","GamePage","Categories","MainPageContainer","MainPage","DataForStatistics","WordForStatistics","CategoryForStatistics","words","sortedWords","sortConfig","modifyWords","forEach","el","push","sort","b","wordsStat","StatisticsPage","sortedCategory","setSortedCategory","setSortedWords","setSortConfig","allData","toogle","statistics","cata","Main","path","component","render","match","params","Footer","href","App","useCallback","activeMode","UpdateGameModeCTX","openNavCTX","setIsOpen","UpdateOpenNavCTX","Provider","value","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.060ad8e3.chunk.js","sourcesContent":["import { createContext, useState, useCallback } from \"react\";\n\nexport interface GameModeCTX {\n  gameMode: string;\n  setMode: (activeMode: string) => void;\n}\n\nconst DEFFAULT_GAME_MODE: GameModeCTX = {\n  gameMode: \"TRAIN\",\n  setMode: () => {},\n};\n\nexport const gameModeContext = createContext<GameModeCTX>(DEFFAULT_GAME_MODE);\n\nexport const UpdateGameModeCTX = (): GameModeCTX => {\n  const [gameMode, setGameMode] = useState(\"TRAIN\");\n\n  const setMode = useCallback((activeMode: string): void => {\n    setGameMode(activeMode);\n  }, []);\n\n  return {\n    gameMode,\n    setMode,\n  };\n};\n","import { createContext, useCallback, useState } from \"react\";\n\nexport interface OpenNavCTX {\n  isOpen: boolean;\n  setMode: (toggle: boolean) => void;\n}\n\nconst DEFFAULT_OPEN_NAV: OpenNavCTX = {\n  isOpen: false,\n  setMode: () => {},\n};\n\nexport const OpenNavContext = createContext<OpenNavCTX>(DEFFAULT_OPEN_NAV);\n\nexport const UpdateOpenNavCTX = (): OpenNavCTX => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const setMode = useCallback((toggle: boolean): void => {\n    setIsOpen(toggle);\n  }, []);\n\n  return {\n    isOpen,\n    setMode,\n  };\n};\n","interface LinkData {\n  link: string;\n  linkName: string;\n}\n\nexport const ArrLinks: LinkData[] = [\n  {\n    link: \"./\",\n    linkName: \"Main Page\",\n  },\n  {\n    link: \"./game/1\",\n    linkName: \"Action (set A)\",\n  },\n  {\n    link: \"./game/2\",\n    linkName: \"Action (set B)\",\n  },\n  {\n    link: \"./game/3\",\n    linkName: \"Animal (set A)\",\n  },\n  {\n    link: \"./game/4\",\n    linkName: \"Animal (set B)\",\n  },\n  {\n    link: \"./game/5\",\n    linkName: \"Clothes\",\n  },\n  {\n    link: \"./game/6\",\n    linkName: \"Emotions\",\n  },\n  {\n    link: \"./game/7\",\n    linkName: \"Berries\",\n  },\n  {\n    link: \"./game/8\",\n    linkName: \"Furniture\",\n  },\n  {\n    link: \"./statistics\",\n    linkName: \"Statistics\",\n  },\n];\n","import { MouseEvent } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { ArrLinks } from \"../../utils/arrLinks\";\nimport { PropsNavbar } from \"./navbar-props-interfaces\";\nimport \"./navbar.scss\";\n\nconst Navbar = ({ open, openNav }: PropsNavbar): JSX.Element => {\n  let classNames = \"app-header__nav\";\n\n  if (open) {\n    classNames += \" open\";\n  }\n\n  const links = ArrLinks.map(({ link, linkName }, i) => {\n    return (\n      <li className=\"app-header__nav-list__item\" key={i}>\n        <NavLink\n          className=\"app-header__nav-list__link\"\n          to={link}\n          exact\n          onClick={() => {\n            openNav();\n          }}\n        >\n          {linkName}\n        </NavLink>\n      </li>\n    );\n  });\n\n  return (\n    <nav\n      className={classNames}\n      onClick={(evt: MouseEvent) => {\n        evt.stopPropagation();\n      }}\n      role=\"none\"\n    >\n      <ul className=\"app-header__nav-list\">{links}</ul>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import { useEffect, useContext, useState } from \"react\";\nimport Navbar from \"../navbar/Navbar\";\nimport { OpenNavContext } from \"../open-nav/open-nav\";\nimport \"./burger-menu.scss\";\n\nconst Burger = (): JSX.Element => {\n  const { isOpen, setMode } = useContext(OpenNavContext);\n  const [toggleIsOpen, setToggleIsOpen] = useState(isOpen);\n\n  let classNames = \"b-container\";\n\n  if (isOpen) {\n    classNames += \" open\";\n  }\n\n  const openNav = (): void => {\n    setToggleIsOpen((toggle) => !toggle);\n  };\n\n  useEffect(() => {\n    setMode(toggleIsOpen);\n  }, [setMode, toggleIsOpen]);\n\n  return (\n    <div className={classNames} onClick={() => openNav()} role=\"none\">\n      <div className=\"b-menu\">\n        <div className=\"b-bun b-bun--top\"></div>\n        <div className=\"b-bun b-bun--mid\"></div>\n        <div className=\"b-bun b-bun--bottom\"></div>\n      </div>\n      <Navbar open={isOpen} openNav={openNav} />\n    </div>\n  );\n};\n\nexport default Burger;\n","export const PLAY = \"PLAY\";\nexport const TRAIN = \"TRAIN\";\n\nexport type GameMode = typeof PLAY | typeof TRAIN;\n","import React, { useState, useContext, useEffect } from \"react\";\nimport { GameMode, PLAY, TRAIN } from \"../../api/types\";\nimport { gameModeContext } from \"../game-mode/game-mode-context\";\nimport \"./switcher.scss\";\n\nconst Switcher = (): JSX.Element => {\n  const [gameMode, setGameMode] = useState(TRAIN as GameMode);\n  const { setMode } = useContext(gameModeContext);\n\n  let checked = false;\n\n  if (gameMode === (PLAY as GameMode)) {\n    checked = true;\n  }\n\n  const changeGameMode = (): void => {\n    setGameMode(gameMode === TRAIN ? PLAY : TRAIN);\n  };\n\n  useEffect(() => {\n    setMode(gameMode);\n  }, [setMode, gameMode]);\n\n  return (\n    <div className=\"toggle-switch\">\n      <label className=\"toggle-switch__label\" htmlFor=\"toggleSwitch\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle-switch__checkbox\"\n          name=\"toggleSwitch\"\n          id=\"toggleSwitch\"\n          defaultChecked={checked}\n        />\n\n        <span className=\"toggle-switch__train\">Train</span>\n        <span\n          className=\"toggle-switch__play\"\n          onClick={() => {\n            changeGameMode();\n          }}\n          role=\"none\"\n        >\n          Play\n        </span>\n        <span className=\"toggle-switch__tumbler\"></span>\n      </label>\n    </div>\n  );\n};\n\nexport default Switcher;\n","import Burger from \"../burger-menu/Burger-menu\";\nimport Switcher from \"../switcher/Switcher\";\n\nexport const Header = (): JSX.Element => {\n  return (\n    <header className=\"app-header\">\n      <Burger />\n      <Switcher />\n    </header>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport { Data } from \"./interfaces\";\n\nconst DummyServer = (): (string | Data[])[] => {\n  const [result, setResult] = useState<Data[]>([]);\n  const [loading, setLoading] = useState(\"true\");\n\n  useEffect(() => {\n    async function GetData() {\n      try {\n        const response = await fetch(\"../cards.json\");\n        const res: Data[] = await response.json();\n        await setResult(res);\n        setLoading(\"false\");\n      } catch (e) {\n        setLoading(\"null\");\n        throw new Error(`${e}`);\n      }\n    }\n\n    if (result.length === 0) {\n      GetData();\n    }\n  });\n\n  return [result, loading];\n};\n\nexport default DummyServer;\n","export const GameOverAudio = (result: boolean): void => {\n  if (result) {\n    setTimeout(() => {\n      const audio = new Audio(\"/audio/success.mp3\");\n      audio.play();\n    }, 500);\n  } else {\n    setTimeout(() => {\n      const audio = new Audio(\"/audio/failure.mp3\");\n      audio.play();\n    }, 500);\n  }\n};\n","import { Card } from \"../api/interfaces\";\n\nexport const shuffleArray = (array: Card[]): Card[] => {\n  const gameArr = [...array];\n  for (let i = gameArr.length - 1; i > 0; i -= 1) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [gameArr[i], gameArr[j]] = [gameArr[j], gameArr[i]];\n  }\n  return gameArr;\n};\n","import React, { useState, useContext } from \"react\";\nimport { Card, WordsStatistics } from \"../../api/interfaces\";\nimport { updateWordStats } from \"../../utils/updateWordStats\";\nimport { gameModeContext } from \"../game-mode/game-mode-context\";\nimport \"./cards.scss\";\n\nconst Cards = ({\n  word,\n  translation,\n  image,\n  audioSrc,\n  activeSound,\n  NextAudio,\n  gameArrIndex,\n  Progress,\n  category,\n  isGame,\n}: Card): JSX.Element => {\n  const currentState: WordsStatistics = JSON.parse(\n    localStorage.getItem(`${word}`) as string\n  );\n\n  const [isClick, setIsClick] = useState<boolean>(false);\n  const [isCorrect, setIsCorrect] = useState<boolean>(false);\n  const [clicksTrainMode, setClicksTrainMode] = useState<number>(() => {\n    if (currentState) {\n      return Number(currentState.clicksTrainMode);\n    }\n    return 0;\n  });\n  const [succesGameMode, setSuccesGameMode] = useState<number>(() => {\n    if (currentState) {\n      return Number(currentState.succesGameMode);\n    }\n    return 0;\n  });\n  const [wrongGameMode, setWrongGameMode] = useState<number>(() => {\n    if (currentState) {\n      return Number(currentState.wrongGameMode);\n    }\n    return 0;\n  });\n\n  const context = useContext(gameModeContext);\n\n  let cardClasses = \"card\";\n  let cardContainerClasses = \"card-container\";\n\n  if (context.gameMode === \"PLAY\") {\n    cardContainerClasses += \" collapse\";\n  }\n\n  if (isCorrect) {\n    cardContainerClasses += \" disable\";\n  }\n\n  if (isClick) {\n    cardClasses += \" hover\";\n  }\n\n  const addClass = (): void => {\n    setIsClick(true);\n  };\n\n  const removeClass = (): void => {\n    setIsClick(false);\n  };\n\n  const playAudio = (url: string) => {\n    const audio = new Audio(url);\n    audio.currentTime = 0;\n    audio.play();\n    setClicksTrainMode((x) => x + 1);\n  };\n\n  const onCardClick = (elem: string) => {\n    if (!isGame) {\n      return;\n    }\n    if (activeSound?.word === elem) {\n      setSuccesGameMode((x) => x + 1);\n      setIsCorrect(true);\n      Progress(true);\n      const audio = new Audio(\"../audio/correct.wav\");\n      audio.volume = 0.3;\n      audio.play();\n      audio.addEventListener(\"ended\", () => {\n        NextAudio(gameArrIndex);\n      });\n    } else {\n      Progress(false);\n      setWrongGameMode((x) => x + 1);\n      const audio = new Audio(\"../audio/error.mp3\");\n      audio.play();\n    }\n  };\n\n  updateWordStats({\n    category,\n    word,\n    translation,\n    clicksTrainMode,\n    succesGameMode,\n    wrongGameMode,\n  });\n\n  const onClickHandler = context.gameMode === \"PLAY\" ? onCardClick : playAudio;\n  const paramOnClickHandler = context.gameMode === \"PLAY\" ? word : audioSrc;\n  return (\n    <div\n      className={cardContainerClasses}\n      onClick={() => {\n        onClickHandler(paramOnClickHandler);\n      }}\n      onMouseLeave={() => removeClass()}\n      role=\"none\"\n    >\n      <div className={cardClasses}>\n        <div className=\"card__front\">\n          <img className=\"card__front-img\" src={image} alt={`${word}`} />\n          <div className=\"card__front-container\">\n            <p>{word}</p>\n            <button\n              className=\"card__front-rotateBtn\"\n              type=\"button\"\n              onClick={() => addClass()}\n            >\n              <img\n                className=\"rotate__svg\"\n                src=\"../img/rotate.svg\"\n                alt=\"rotate\"\n              />\n            </button>\n          </div>\n        </div>\n        <div className=\"card__back\">\n          <img className=\"card__back-img\" src={image} alt={`${word}`} />\n          <div className=\"card__back-container\">\n            <p>{translation}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Cards;\n","import { WordsStatistics } from \"../api/interfaces\";\n\nexport const updateWordStats = ({\n  category,\n  word,\n  translation,\n  clicksTrainMode = 0,\n  succesGameMode = 0,\n  wrongGameMode = 0,\n}: WordsStatistics): void => {\n  let percentCorrects = 0;\n\n  if (wrongGameMode === 0 && succesGameMode === 0) {\n    percentCorrects = 0;\n  } else if (wrongGameMode === 0 && succesGameMode > 0) {\n    percentCorrects = 100;\n  } else {\n    percentCorrects = +(\n      (succesGameMode / (succesGameMode + wrongGameMode)) *\n      100\n    ).toFixed();\n  }\n\n  localStorage.setItem(\n    `${word}`,\n    JSON.stringify({\n      category: `${category}`,\n      word: `${word}`,\n      translation: `${translation}`,\n      clicksTrainMode: `${clicksTrainMode}`,\n      succesGameMode: `${succesGameMode}`,\n      wrongGameMode: `${wrongGameMode}`,\n      percentCorrects: `${percentCorrects}`,\n    })\n  );\n};\n","import { useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { GameOverState } from \"../../api/interfaces\";\nimport \"./game-over.scss\";\n\nexport const GameOver = ({ endGame }: GameOverState): JSX.Element => {\n  const [redirect, setRedirect] = useState<boolean>(false);\n\n  if (redirect) {\n    return <Redirect to=\"/\" />;\n  }\n\n  setTimeout(() => setRedirect(true), 3000);\n\n  if (endGame) {\n    return (\n      <div className=\"game-over\">\n        <p className=\"game-over__text\">Well Done!</p>\n        <img className=\"game-over__img\" src=\"/img/success.jpg\" alt=\"succes\" />\n      </div>\n    );\n  }\n  return (\n    <div className=\"game-over\">\n      <p className=\"game-over__text\">Try again</p>\n      <img className=\"game-over__img\" src=\"/img/failure.jpg\" alt=\"failure\" />\n    </div>\n  );\n};\n","import React, { useContext, useState, useEffect } from \"react\";\nimport DummyServer from \"../../api/dummyMocks\";\nimport { Card, Data, gameSound } from \"../../api/interfaces\";\nimport { PropsGamePage } from \"../../pages/game-page/game-page-props\";\nimport { GameOverAudio } from \"../../utils/game-over-audio\";\nimport { winStar, loseStar } from \"../../utils/progressStars\";\nimport { shuffleArray } from \"../../utils/shuffleArray\";\nimport Cards from \"../cards/cards\";\nimport { gameModeContext } from \"../game-mode/game-mode-context\";\nimport { GameOver } from \"../game-over/game-over\";\nimport \"./game-container.scss\";\n\nconst GameContainer = ({ id }: PropsGamePage): JSX.Element => {\n  const gameModeCTX = useContext(gameModeContext);\n  const [isGame, setIsGame] = useState<boolean>(false);\n  const [gameArr, setGameArr] = useState<Card[]>();\n  const [gameArrIndex, setGameArrIndex] = useState<number>(0);\n  const [activeSound, setActiveSound] = useState<gameSound | null>(null);\n  const [gameProgress, setGameProgress] = useState<JSX.Element[]>([]);\n  const [endGame, setEndGame] = useState<boolean>();\n  const [errors, setErrors] = useState<number>(0);\n\n  const [result, loading] = DummyServer();\n  const index = Number(id) - 1;\n  const currArrCards: Data = result[index] as Data;\n\n  useEffect(() => {\n    (async function createShuffleArr() {\n      if (currArrCards) {\n        const shuffleArr = await shuffleArray(currArrCards.cards);\n        setGameArr(shuffleArr);\n        setIsGame(false);\n        setActiveSound(null);\n      }\n    })();\n  }, [currArrCards]);\n\n  let btnClasses = \"game-container__button\";\n\n  if (gameModeCTX.gameMode === \"PLAY\") {\n    btnClasses += \" show\";\n  }\n\n  if (isGame) {\n    btnClasses += \" game-container__button-game\";\n  }\n\n  const PlayAudio = (idx: number) => {\n    setIsGame(true);\n    if (activeSound) {\n      activeSound.audio.play();\n    } else {\n      const audio = new Audio(gameArr![idx].audioSrc);\n      setActiveSound({ audio, word: gameArr![idx].word });\n      audio.play();\n      setGameArrIndex((x) => x + 1);\n    }\n  };\n\n  const NextAudio = (idx: number) => {\n    if (gameArrIndex === gameArr?.length) {\n      return;\n    }\n    const audio = new Audio(gameArr![idx].audioSrc);\n    setActiveSound({ audio, word: gameArr![idx].word });\n    audio.play();\n    setGameArrIndex((x) => x + 1);\n  };\n\n  const Progress = (status: boolean) => {\n    if (gameArrIndex === gameArr?.length) {\n      setIsGame(false);\n      if (errors > 0) {\n        GameOverAudio(false);\n        setEndGame(false);\n      } else {\n        GameOverAudio(true);\n        setEndGame(true);\n      }\n    }\n    if (status) {\n      setGameProgress((arr) => [winStar(), ...arr]);\n    } else {\n      setErrors((x) => x + 1);\n      setGameProgress((arr) => [loseStar(), ...arr]);\n    }\n  };\n\n  if (endGame) {\n    return <GameOver endGame={endGame} />;\n  }\n\n  if (endGame === false) {\n    return <GameOver endGame={endGame} />;\n  }\n\n  return (\n    <div className=\"game-container\">\n      {loading === \"true\" ? (\n        <h1>Waiting...</h1>\n      ) : (\n        currArrCards.cards.map((card, i) => {\n          return (\n            <Cards\n              key={i}\n              word={card.word}\n              translation={card.translation}\n              image={card.image}\n              audioSrc={card.audioSrc}\n              activeSound={activeSound!}\n              NextAudio={NextAudio}\n              gameArrIndex={gameArrIndex}\n              Progress={Progress}\n              category={currArrCards.category.name}\n              isGame={isGame}\n            />\n          );\n        })\n      )}\n      <button\n        className={btnClasses}\n        type=\"button\"\n        onClick={() => PlayAudio(gameArrIndex)}\n      >\n        Start Game\n      </button>\n      <ul className=\"progress\">{gameProgress}</ul>\n    </div>\n  );\n};\n\nexport default GameContainer;\n","export const loseStar = (): JSX.Element => {\n  return (\n    <li>\n      <img src=\"/img/donut.svg\" alt=\"LoseStar\" className=\"progress__img\" />\n    </li>\n  );\n};\n\nexport const winStar = (): JSX.Element => {\n  return (\n    <li>\n      <img src=\"/img/donut-win.svg\" alt=\"WinStar\" className=\"progress__img\" />\n    </li>\n  );\n};\n","import React from \"react\";\nimport GameContainer from \"../../components/game-container/game-container\";\nimport { PropsGamePage } from \"./game-page-props\";\n\nconst GamePage = ({ id }: PropsGamePage): JSX.Element => {\n  return (\n    <div className=\"app-game-page\">\n      <GameContainer id={id} />\n    </div>\n  );\n};\n\nexport default GamePage;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { Category } from \"../../api/interfaces\";\n\nimport \"./categories.scss\";\n\nconst Categories = ({ image, name, id }: Category): JSX.Element => {\n  return (\n    <NavLink className=\"category-container\" to={`/game/${id}`}>\n      <div className=\"category-container__img\">\n        <img src={image} alt={`Category ${name}`} />\n      </div>\n      <div className=\"category-container__text\">{name}</div>\n    </NavLink>\n  );\n};\n\nexport default Categories;\n","import React from \"react\";\nimport DummyServer from \"../../api/dummyMocks\";\nimport { Data } from \"../../api/interfaces\";\n// import Cards from \"../cards/cards\";\nimport Categories from \"../categories/categories\";\nimport \"./main-page-container.scss\";\n\nconst MainPageContainer = (): JSX.Element => {\n  const [result] = DummyServer();\n\n  const arrData: Data[] = result as Data[];\n  const cards = arrData.map(({ category }, i) => {\n    return (\n      <Categories\n        key={i}\n        image={category.image}\n        name={category.name}\n        id={category.id}\n      />\n    );\n  });\n\n  return <div className=\"app-main-page__container\">{cards}</div>;\n};\n\nexport default MainPageContainer;\n","import MainPageContainer from \"../../components/main-page-container/main-page-container\";\n\nconst MainPage = (): JSX.Element => {\n  return (\n    <div className=\"app-main-page\">\n      <MainPageContainer />\n    </div>\n  );\n};\n\nexport default MainPage;\n","export const DataForStatistics = {\n  clicksTrainMode: 0,\n  succesGameMode: 0,\n  wrongGameMode: 0,\n  percentCorrects: 0,\n};\n","import { WordsStatistics } from \"../../api/interfaces\";\n\nexport const WordForStatistics = ({\n  category,\n  word,\n  translation,\n  clicksTrainMode,\n  succesGameMode,\n  wrongGameMode,\n  percentCorrects,\n}: WordsStatistics): JSX.Element => {\n  return (\n    <tr className=\"table__row\">\n      <td>{category}</td>\n      <td>{word}</td>\n      <td>{translation}</td>\n      <td>{clicksTrainMode}</td>\n      <td>{succesGameMode}</td>\n      <td>{wrongGameMode}</td>\n      <td>{percentCorrects}%</td>\n    </tr>\n  );\n};\n","import { WordsStatistics, WordsWithStatistics } from \"../../api/interfaces\";\nimport { DataForStatistics } from \"../../utils/dataForStatistics\";\nimport { WordForStatistics } from \"./word-for-statistics\";\n\nexport const CategoryForStatistics = ({\n  category,\n  words,\n  sortedWords,\n  sortConfig,\n}: WordsWithStatistics): JSX.Element => {\n  const modifyWords: WordsStatistics[] = [];\n\n  words.forEach((word) => {\n    const el = JSON.parse(localStorage.getItem(`${word.word}`) as string);\n    if (el) {\n      modifyWords.push(el);\n    } else {\n      modifyWords.push({\n        word: word.word,\n        translation: word.translation,\n        ...DataForStatistics,\n        category,\n      });\n    }\n  });\n\n  if (sortedWords !== null) {\n    modifyWords.sort((a, b) => {\n      if (a[sortedWords] < b[sortedWords]) {\n        return sortConfig === \"ASC\" ? -1 : 1;\n      }\n      if (a[sortedWords] > b[sortedWords]) {\n        return sortConfig === \"ASC\" ? 1 : -1;\n      }\n      return 0;\n    });\n  }\n\n  const wordsStat = modifyWords.map((x, i) => {\n    return (\n      <WordForStatistics\n        key={i}\n        category={category}\n        word={x.word}\n        translation={x.translation}\n        clicksTrainMode={x.clicksTrainMode}\n        succesGameMode={x.succesGameMode}\n        wrongGameMode={x.wrongGameMode}\n        percentCorrects={x.percentCorrects}\n      />\n    );\n  });\n\n  return <tbody>{wordsStat}</tbody>;\n};\n","import React, { useState } from \"react\";\nimport DummyServer from \"../../api/dummyMocks\";\nimport { Data } from \"../../api/interfaces\";\nimport { CategoryForStatistics } from \"../../components/data-for-statistics/category-for-statistics\";\nimport \"./statistics-page.scss\";\n\nconst StatisticsPage = (): JSX.Element => {\n  const [result] = DummyServer();\n  const [sortedCategory, setSortedCategory] = useState<string | null>(null);\n  const [sortedWords, setSortedWords] = useState<string | null>(null);\n  const [sortConfig, setSortConfig] = useState(\"ASC\");\n  const allData: Data[] = result as Data[];\n\n  if (sortedCategory !== null) {\n    allData.sort((a, b) => {\n      if (a[sortedCategory].name < b[sortedCategory].name) {\n        return sortConfig === \"ASC\" ? -1 : 1;\n      }\n      if (a[sortedCategory].name > b[sortedCategory].name) {\n        return sortConfig === \"ASC\" ? 1 : -1;\n      }\n      return 0;\n    });\n  }\n\n  const toogle = () => {\n    setSortConfig(sortConfig === \"ASC\" ? \"DESC\" : \"ASC\");\n  };\n\n  const statistics = allData.map((cata, i) => {\n    return (\n      <CategoryForStatistics\n        key={i}\n        category={cata.category.name}\n        words={cata.cards}\n        sortedWords={sortedWords}\n        sortConfig={sortConfig}\n      />\n    );\n  });\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>\n            <button\n              type=\"button\"\n              onClick={() => {\n                setSortedCategory(\"category\");\n                toogle();\n              }}\n            >\n              Category\n            </button>\n          </th>\n          <th>\n            <button\n              type=\"button\"\n              onClick={() => {\n                setSortedWords(\"word\");\n                toogle();\n              }}\n            >\n              Word\n            </button>\n          </th>\n          <th>\n            <button\n              type=\"button\"\n              onClick={() => {\n                setSortedWords(\"translation\");\n                toogle();\n              }}\n            >\n              Translate\n            </button>\n          </th>\n          <th>\n            <button\n              type=\"button\"\n              onClick={() => {\n                setSortedWords(\"clicksTrainMode\");\n                toogle();\n              }}\n            >\n              Train Mode\n            </button>\n          </th>\n          <th>\n            <button\n              type=\"button\"\n              onClick={() => {\n                setSortedWords(\"succesGameMode\");\n                toogle();\n              }}\n            >\n              Game mode\n            </button>\n          </th>\n          <th>\n            <button\n              type=\"button\"\n              onClick={() => {\n                setSortedWords(\"wrongGameMode\");\n                toogle();\n              }}\n            >\n              Errors\n            </button>\n          </th>\n          <th>\n            <button\n              type=\"button\"\n              onClick={() => {\n                setSortedWords(\"percentCorrects\");\n                toogle();\n              }}\n            >\n              % Corrects\n            </button>\n          </th>\n        </tr>\n      </thead>\n      {statistics}\n    </table>\n  );\n};\n\nexport default StatisticsPage;\n","import { Route, Switch } from \"react-router-dom\";\nimport GamePage from \"../../pages/game-page/game-page\";\nimport MainPage from \"../../pages/main-page/main-page\";\nimport StatisticsPage from \"../../pages/statistics-page/statistics-page\";\nimport \"./main.scss\";\n\nexport const Main = (): JSX.Element => {\n  return (\n    <main className=\"app-main\">\n      <h2 className=\"app-main__text\">English with Simpsons</h2>\n      <Switch>\n        <Route path=\"/\" exact component={MainPage} />\n        <Route path=\"/game\" exact component={GamePage} />\n        <Route\n          path=\"/game/:id\"\n          render={({ match }) => {\n            const { id } = match.params;\n            return <GamePage id={id} />;\n          }}\n        />\n        <Route path=\"/statistics\" component={StatisticsPage} />\n      </Switch>\n    </main>\n  );\n};\n","export const Footer = (): JSX.Element => {\n  return (\n    <footer className=\"app-footer\">\n      <a href=\"https://rs.school/js/\">\n        <img\n          className=\"rsschool-logo\"\n          src=\"../rs_school_js.svg\"\n          alt=\"RSSCHOOL\"\n        />\n      </a>\n      <p>2021 © English for Kids</p>\n    </footer>\n  );\n};\n","import { BrowserRouter as Router } from \"react-router-dom\";\nimport \"./App.scss\";\nimport {\n  gameModeContext,\n  UpdateGameModeCTX,\n} from \"./components/game-mode/game-mode-context\";\nimport {\n  OpenNavContext,\n  UpdateOpenNavCTX,\n} from \"./components/open-nav/open-nav\";\nimport { Header } from \"./components/header/header\";\nimport { Main } from \"./components/main/main\";\nimport { Footer } from \"./components/footer/footer\";\n\nfunction App(): JSX.Element {\n  const gameModeCTX = UpdateGameModeCTX();\n  const openNavCTX = UpdateOpenNavCTX();\n  return (\n    <Router>\n      <OpenNavContext.Provider value={openNavCTX}>\n        <gameModeContext.Provider value={gameModeCTX}>\n          <div\n            className=\"app-container\"\n            onClick={() => openNavCTX.setMode(false)}\n            role=\"none\"\n          >\n            <Header />\n            <Main />\n            <Footer />\n          </div>\n        </gameModeContext.Provider>\n      </OpenNavContext.Provider>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}